// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package orderbook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderbookClient is the client API for Orderbook service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderbookClient interface {
	SubscribeL2(ctx context.Context, in *SubscribeArgs, opts ...grpc.CallOption) (Orderbook_SubscribeL2Client, error)
	NewLimitOrder(ctx context.Context, in *NewLimitOrderArgs, opts ...grpc.CallOption) (*NewLimitOrderResponse, error)
	NewMarketOrder(ctx context.Context, in *NewMarketOrderArgs, opts ...grpc.CallOption) (*NewMarketOrderResponse, error)
	CancelOrder(ctx context.Context, in *CancelOrderArgs, opts ...grpc.CallOption) (*CancelOrderResult, error)
}

type orderbookClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderbookClient(cc grpc.ClientConnInterface) OrderbookClient {
	return &orderbookClient{cc}
}

func (c *orderbookClient) SubscribeL2(ctx context.Context, in *SubscribeArgs, opts ...grpc.CallOption) (Orderbook_SubscribeL2Client, error) {
	stream, err := c.cc.NewStream(ctx, &Orderbook_ServiceDesc.Streams[0], "/orderbook.Orderbook/SubscribeL2", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderbookSubscribeL2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Orderbook_SubscribeL2Client interface {
	Recv() (*Prices, error)
	grpc.ClientStream
}

type orderbookSubscribeL2Client struct {
	grpc.ClientStream
}

func (x *orderbookSubscribeL2Client) Recv() (*Prices, error) {
	m := new(Prices)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderbookClient) NewLimitOrder(ctx context.Context, in *NewLimitOrderArgs, opts ...grpc.CallOption) (*NewLimitOrderResponse, error) {
	out := new(NewLimitOrderResponse)
	err := c.cc.Invoke(ctx, "/orderbook.Orderbook/NewLimitOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderbookClient) NewMarketOrder(ctx context.Context, in *NewMarketOrderArgs, opts ...grpc.CallOption) (*NewMarketOrderResponse, error) {
	out := new(NewMarketOrderResponse)
	err := c.cc.Invoke(ctx, "/orderbook.Orderbook/NewMarketOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderbookClient) CancelOrder(ctx context.Context, in *CancelOrderArgs, opts ...grpc.CallOption) (*CancelOrderResult, error) {
	out := new(CancelOrderResult)
	err := c.cc.Invoke(ctx, "/orderbook.Orderbook/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderbookServer is the server API for Orderbook service.
// All implementations must embed UnimplementedOrderbookServer
// for forward compatibility
type OrderbookServer interface {
	SubscribeL2(*SubscribeArgs, Orderbook_SubscribeL2Server) error
	NewLimitOrder(context.Context, *NewLimitOrderArgs) (*NewLimitOrderResponse, error)
	NewMarketOrder(context.Context, *NewMarketOrderArgs) (*NewMarketOrderResponse, error)
	CancelOrder(context.Context, *CancelOrderArgs) (*CancelOrderResult, error)
	mustEmbedUnimplementedOrderbookServer()
}

// UnimplementedOrderbookServer must be embedded to have forward compatible implementations.
type UnimplementedOrderbookServer struct {
}

func (UnimplementedOrderbookServer) SubscribeL2(*SubscribeArgs, Orderbook_SubscribeL2Server) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeL2 not implemented")
}
func (UnimplementedOrderbookServer) NewLimitOrder(context.Context, *NewLimitOrderArgs) (*NewLimitOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewLimitOrder not implemented")
}
func (UnimplementedOrderbookServer) NewMarketOrder(context.Context, *NewMarketOrderArgs) (*NewMarketOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMarketOrder not implemented")
}
func (UnimplementedOrderbookServer) CancelOrder(context.Context, *CancelOrderArgs) (*CancelOrderResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderbookServer) mustEmbedUnimplementedOrderbookServer() {}

// UnsafeOrderbookServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderbookServer will
// result in compilation errors.
type UnsafeOrderbookServer interface {
	mustEmbedUnimplementedOrderbookServer()
}

func RegisterOrderbookServer(s grpc.ServiceRegistrar, srv OrderbookServer) {
	s.RegisterService(&Orderbook_ServiceDesc, srv)
}

func _Orderbook_SubscribeL2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeArgs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderbookServer).SubscribeL2(m, &orderbookSubscribeL2Server{stream})
}

type Orderbook_SubscribeL2Server interface {
	Send(*Prices) error
	grpc.ServerStream
}

type orderbookSubscribeL2Server struct {
	grpc.ServerStream
}

func (x *orderbookSubscribeL2Server) Send(m *Prices) error {
	return x.ServerStream.SendMsg(m)
}

func _Orderbook_NewLimitOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewLimitOrderArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderbookServer).NewLimitOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderbook.Orderbook/NewLimitOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderbookServer).NewLimitOrder(ctx, req.(*NewLimitOrderArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderbook_NewMarketOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMarketOrderArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderbookServer).NewMarketOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderbook.Orderbook/NewMarketOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderbookServer).NewMarketOrder(ctx, req.(*NewMarketOrderArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderbook_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderbookServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderbook.Orderbook/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderbookServer).CancelOrder(ctx, req.(*CancelOrderArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Orderbook_ServiceDesc is the grpc.ServiceDesc for Orderbook service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orderbook_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderbook.Orderbook",
	HandlerType: (*OrderbookServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewLimitOrder",
			Handler:    _Orderbook_NewLimitOrder_Handler,
		},
		{
			MethodName: "NewMarketOrder",
			Handler:    _Orderbook_NewMarketOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Orderbook_CancelOrder_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeL2",
			Handler:       _Orderbook_SubscribeL2_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "expose/orderbook.proto",
}
