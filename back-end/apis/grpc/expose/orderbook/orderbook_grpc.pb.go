// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package orderbook

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderbooksClient is the client API for Orderbooks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderbooksClient interface {
	SubscribeL2(ctx context.Context, in *SubscribeL2Args, opts ...grpc.CallOption) (Orderbooks_SubscribeL2Client, error)
	// rpc OrderBidi(stream OrderArgs) returns (stream Order) {};
	ProcessOrder(ctx context.Context, in *OrderArgs, opts ...grpc.CallOption) (*Order, error)
	CancelOrder(ctx context.Context, in *CancelOrderArgs, opts ...grpc.CallOption) (*Order, error)
	OrderList(ctx context.Context, in *OrderListArgs, opts ...grpc.CallOption) (*OrderListResult, error)
}

type orderbooksClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderbooksClient(cc grpc.ClientConnInterface) OrderbooksClient {
	return &orderbooksClient{cc}
}

func (c *orderbooksClient) SubscribeL2(ctx context.Context, in *SubscribeL2Args, opts ...grpc.CallOption) (Orderbooks_SubscribeL2Client, error) {
	stream, err := c.cc.NewStream(ctx, &Orderbooks_ServiceDesc.Streams[0], "/orderbooks.Orderbooks/SubscribeL2", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderbooksSubscribeL2Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Orderbooks_SubscribeL2Client interface {
	Recv() (*Prices, error)
	grpc.ClientStream
}

type orderbooksSubscribeL2Client struct {
	grpc.ClientStream
}

func (x *orderbooksSubscribeL2Client) Recv() (*Prices, error) {
	m := new(Prices)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderbooksClient) ProcessOrder(ctx context.Context, in *OrderArgs, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/orderbooks.Orderbooks/ProcessOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderbooksClient) CancelOrder(ctx context.Context, in *CancelOrderArgs, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/orderbooks.Orderbooks/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderbooksClient) OrderList(ctx context.Context, in *OrderListArgs, opts ...grpc.CallOption) (*OrderListResult, error) {
	out := new(OrderListResult)
	err := c.cc.Invoke(ctx, "/orderbooks.Orderbooks/OrderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderbooksServer is the server API for Orderbooks service.
// All implementations must embed UnimplementedOrderbooksServer
// for forward compatibility
type OrderbooksServer interface {
	SubscribeL2(*SubscribeL2Args, Orderbooks_SubscribeL2Server) error
	// rpc OrderBidi(stream OrderArgs) returns (stream Order) {};
	ProcessOrder(context.Context, *OrderArgs) (*Order, error)
	CancelOrder(context.Context, *CancelOrderArgs) (*Order, error)
	OrderList(context.Context, *OrderListArgs) (*OrderListResult, error)
	mustEmbedUnimplementedOrderbooksServer()
}

// UnimplementedOrderbooksServer must be embedded to have forward compatible implementations.
type UnimplementedOrderbooksServer struct {
}

func (UnimplementedOrderbooksServer) SubscribeL2(*SubscribeL2Args, Orderbooks_SubscribeL2Server) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeL2 not implemented")
}
func (UnimplementedOrderbooksServer) ProcessOrder(context.Context, *OrderArgs) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessOrder not implemented")
}
func (UnimplementedOrderbooksServer) CancelOrder(context.Context, *CancelOrderArgs) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderbooksServer) OrderList(context.Context, *OrderListArgs) (*OrderListResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderList not implemented")
}
func (UnimplementedOrderbooksServer) mustEmbedUnimplementedOrderbooksServer() {}

// UnsafeOrderbooksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderbooksServer will
// result in compilation errors.
type UnsafeOrderbooksServer interface {
	mustEmbedUnimplementedOrderbooksServer()
}

func RegisterOrderbooksServer(s grpc.ServiceRegistrar, srv OrderbooksServer) {
	s.RegisterService(&Orderbooks_ServiceDesc, srv)
}

func _Orderbooks_SubscribeL2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeL2Args)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OrderbooksServer).SubscribeL2(m, &orderbooksSubscribeL2Server{stream})
}

type Orderbooks_SubscribeL2Server interface {
	Send(*Prices) error
	grpc.ServerStream
}

type orderbooksSubscribeL2Server struct {
	grpc.ServerStream
}

func (x *orderbooksSubscribeL2Server) Send(m *Prices) error {
	return x.ServerStream.SendMsg(m)
}

func _Orderbooks_ProcessOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderbooksServer).ProcessOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderbooks.Orderbooks/ProcessOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderbooksServer).ProcessOrder(ctx, req.(*OrderArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderbooks_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderbooksServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderbooks.Orderbooks/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderbooksServer).CancelOrder(ctx, req.(*CancelOrderArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Orderbooks_OrderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderListArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderbooksServer).OrderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderbooks.Orderbooks/OrderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderbooksServer).OrderList(ctx, req.(*OrderListArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Orderbooks_ServiceDesc is the grpc.ServiceDesc for Orderbooks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Orderbooks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderbooks.Orderbooks",
	HandlerType: (*OrderbooksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessOrder",
			Handler:    _Orderbooks_ProcessOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Orderbooks_CancelOrder_Handler,
		},
		{
			MethodName: "OrderList",
			Handler:    _Orderbooks_OrderList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeL2",
			Handler:       _Orderbooks_SubscribeL2_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "expose/orderbook/orderbook.proto",
}
